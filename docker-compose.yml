services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: "pg_isready -d postgres -U postgres"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s
    networks:
      - backend

  s3:
    image: 'bitnami/minio:latest'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=user
      - MINIO_ROOT_PASSWORD=password
    networks:
      - backend
    volumes:
      - 'minio-volume:/data'

  liquibase-migrations:
    image: liquibase/liquibase:4.18
    depends_on:
      - db
    command:
      - --hub-mode=off
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://db:5432/postgres
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./common/src/main/resources/migrations:/liquibase/changelog
    networks:
      - backend

  eureka-server:
    build:
      context: .
      dockerfile: docker/eureka-server.Dockerfile
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl --silent --fail eureka-server:8761/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  config-server:
    build:
      context: .
      dockerfile: docker/config-server.Dockerfile
    ports:
      - "8888:8888"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
    healthcheck:
      test: "curl --silent --fail config-server:8888/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  gateway:
    build:
      context: .
      dockerfile: docker/gateway.Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
    healthcheck:
      test: "curl --silent --fail gateway:8080/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  authentication-service:
    build:
      context: .
      dockerfile: docker/authentication-service.Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      DATASOURCE_URL: r2dbc:postgresql://db:5432/postgres
    healthcheck:
      test: "curl --silent --fail authentication-service:8084/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  user-service:
    build:
      context: .
      dockerfile: docker/user-service.Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      DATASOURCE_URL: r2dbc:postgresql://db:5432/postgres
    healthcheck:
      test: "curl --silent --fail user-service:8081/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  review-service:
    build:
      context: .
      dockerfile: docker/review-service.Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      user-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      DATASOURCE_URL: jdbc:postgresql://db:5432/postgres
    healthcheck:
      test: "curl --silent --fail review-service:8082/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  market-service:
    build:
      context: .
      dockerfile: docker/market-service.Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      user-service:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      DATASOURCE_URL: jdbc:postgresql://db:5432/postgres
    healthcheck:
      test: "curl --silent --fail market-service:8083/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  notification-service:
    build:
      context: .
      dockerfile: docker/notification-service.Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
    healthcheck:
      test: "curl --silent --fail notification-service:8085/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - backend

  kafka-1:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '3'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
    networks:
      - backend

  kafka-2:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "39092:39092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '3'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
    networks:
      - backend

  kafka-3:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "49092:49092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:49092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '3'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
    networks:
      - backend

  init-kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka-1:9092 --list
      
      echo -e 'Creating kafka topics'
      
      kafka-topics --bootstrap-server kafka-1:9092 --create --if-not-exists --topic listing-status-updated --replication-factor 3  --partitions 3
      kafka-topics --bootstrap-server kafka-1:9092 --create --if-not-exists --topic saved-listing-unavailable --replication-factor 3  --partitions 3
      kafka-topics --bootstrap-server kafka-1:9092 --create --if-not-exists --topic deal-created --replication-factor 3  --partitions 3
      kafka-topics --bootstrap-server kafka-1:9092 --create --if-not-exists --topic deal-confirmation --replication-factor 3  --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-1:9092 --list
      "
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "7080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'false'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
    networks:
      - backend

  image-service:
    build:
      context: .
      dockerfile: docker/image-service.Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      DATASOURCE_URL: jdbc:postgresql://db:5432/postgres
      MINIO_URL: http://s3:9000
      MINIO_USERNAME: user
      MINIO_PASSWORD: password
    healthcheck:
      test: "curl --silent --fail image-service:8086/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

volumes:
  pgdata:
  minio-volume:

networks:
  backend:
    driver: bridge
